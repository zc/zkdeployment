==============
Zookeeper Sync
==============

    >>> setup_logging()

sync_with_canonical
===================

sync_with_canonical does the full dance to update a cluster's zookeeper
tree.

It performs the following actions:

    - Determines if there has been a modification in svn
    - Performs a zkimport for all .zk trees in the cluster
    - bumps the /hosts/version attribute to the new svn revision

First, we'll need to do some setup.

    >>> import zc.zk
    >>> zk = zc.zk.ZK('zookeeper:2181')
    >>> svn_url = 'svn+ssh://svn.zope.com/repos/main/home/jim/zkdeployment'
    >>> svn_info = """Path: .
    ... URL: svn+ssh://svn.zope.com/repos/main/home/jim/zkdeployment
    ... Repository Root: svn+ssh://svn.zope.com/repos/main
    ... Repository UUID: 32cb22c4-c7e1-0310-b164-a889846e9adb
    ... Revision: 68951
    ... Node Kind: directory
    ... Schedule: normal
    ... Last Changed Author: jackie
    ... Last Changed Rev: VERSION
    ... Last Changed Date: 2012-04-27 18:12:10 -0400 (Fri, 27 Apr 2012)"""

    >>> zk.import_tree('/extra_thing_that_should_be_ignored')

    >>> import zc.zkdeployment.sync
    >>> import mock
    >>> svn_cmd_patcher = mock.patch('zc.zkdeployment.sync.svn_cmd')

    >>> def assert_(cond, *args):
    ...     if not cond:
    ...         raise AssertionError(*args)
    >>> def check_url(url):
    ...     assert_(url ==
    ...             'svn+ssh://svn.zope.com/repos/main/home/jim/zkdeployment',
    ...             url)

    >>> foo_zk = '/foo\n  /bar'
    >>> bar_zk = '/bar\n  /bar\n  /ham'
    >>> baz_zk = '/baz\n  /bar'
    >>> svn_files = ['foo.zk', 'bar.zk', 'baz.txt']

    >>> def fake_svn(*args):
    ...     command, url = args
    ...     if command == 'info':
    ...         check_url(url)
    ...         return svn_info
    ...     if command == 'ls':
    ...         check_url(url)
    ...         return '\n'.join(svn_files)+'\n'
    ...     if command == 'cat':
    ...         url, name = url.rsplit('/', 1)
    ...         check_url(url)
    ...         return globals()[name.replace('.', '_')]
    >>> svn_cmd_mock = svn_cmd_patcher.start()
    >>> svn_cmd_mock.side_effect = fake_svn

If there isn't a /hosts node, it will create one and sync the tree:

    >>> svn_info = svn_info.replace('VERSION', '124')
    >>> zc.zkdeployment.sync.sync_with_canonical(svn_url, dry_run=False)
    INFO VCS Version: 124
    INFO ZK Version: initial
    INFO Version mismatch detected, resyncing
    INFO Importing foo.zk
    INFO Importing bar.zk

And the tree is updated:

    >>> zk.print_tree()
    /ZktoolsLocks
      string_value = 'zktools ZLock dir'
      /,hosts
        string_value = 'lock'
    /bar
      /bar
      /ham
    /extra_thing_that_should_be_ignored
    /foo
      /bar
    /hosts
      version = 124

When it runs again, and there isn't a change, then it won't do
anything:

    >>> zc.zkdeployment.sync.sync_with_canonical(svn_url, dry_run=False)
    INFO VCS Version: 124
    INFO ZK Version: 124


Let's delete something from one of the trees, and make sure it
disappears:

    >>> bar_zk = '/bar\n  /bar'
    >>> svn_info = svn_info.replace('124', '125')

    >>> zc.zkdeployment.sync.sync_with_canonical(svn_url, dry_run=False)
    INFO VCS Version: 125
    INFO ZK Version: 124
    INFO Version mismatch detected, resyncing
    INFO Importing foo.zk
    INFO Importing bar.zk

And the tree is updated:

    >>> zk.print_tree()
    /ZktoolsLocks
      string_value = 'zktools ZLock dir'
      /,hosts
        string_value = 'lock'
    /bar
      /bar
    /extra_thing_that_should_be_ignored
    /foo
      /bar
    /hosts
      version = 125

If we try to run it again, nothing will happen, since the ZK version now
matches the VCS version.

    >>> zc.zkdeployment.sync.sync_with_canonical(svn_url, dry_run=False)
    INFO VCS Version: 125
    INFO ZK Version: 125

Let's bump the version again, and this time try a dry-run.

    >>> svn_info = svn_info.replace('125', '126')
    >>> zc.zkdeployment.sync.sync_with_canonical(svn_url, dry_run=True)
    INFO VCS Version: 126
    INFO ZK Version: 125
    INFO Version mismatch detected, resyncing
    INFO Importing foo.zk (dry run, no action taken)
    INFO Importing bar.zk (dry run, no action taken)

It didn't do anything, so if we run it again, it will show that there
are still pending changes.

    >>> zc.zkdeployment.sync.sync_with_canonical(svn_url, dry_run=True)
    INFO VCS Version: 126
    INFO ZK Version: 125
    INFO Version mismatch detected, resyncing
    INFO Importing foo.zk (dry run, no action taken)
    INFO Importing bar.zk (dry run, no action taken)

Let's finish up and run it for real.

    >>> zc.zkdeployment.sync.sync_with_canonical(svn_url, dry_run=False)
    INFO VCS Version: 126
    INFO ZK Version: 125
    INFO Version mismatch detected, resyncing
    INFO Importing foo.zk
    INFO Importing bar.zk

If you try to sync while some hosts have not yet converged with the previous
update, you'll get an error.  Here, we'll set up a tree with two hosts, one
of which is still out of date::

   /hosts
     version = 126
     /1.2.3.4
       version = 126
     /1.2.3.5
       version = 125

.. -> tree

    >>> zk.import_tree(tree, trim=True)

Now we'll try to sync:

    >>> svn_info = svn_info.replace('126', '127')
    >>> zc.zkdeployment.sync.sync_with_canonical(svn_url, dry_run=False)
    INFO VCS Version: 127
    INFO ZK Version: 126
    ERROR Version mismatch detected, can't resync since host 1.2.3.5 has not
    converged (125 -> 126)

If we run with the `force` flag, we'll do the deployment anyway, since we
presumably know what we're doing.

    >>> zc.zkdeployment.sync.sync_with_canonical(svn_url, dry_run=False,
    ...     force=True)
    INFO VCS Version: 127
    INFO ZK Version: 126
    INFO Version mismatch detected, resyncing
    INFO Importing foo.zk
    INFO Importing bar.zk

If we try to sync while another syncer is already updating the tree, we'll get
an error::

   /hosts
     version = 126
     /1.2.3.4
       version = 126
     /1.2.3.5
       version = 126

.. -> tree

    >>> zk.import_tree(tree, trim=True)

We'll steal the lock and try to do the sync now:

    >>> svn_info = svn_info.replace('126', '127')
    >>> import zktools.locking
    >>> cluster_lock = zktools.locking.ZkLock(zk, ',hosts')
    >>> with zktools.locking.ZkLock(zk, ',hosts'):
    ...     zc.zkdeployment.sync.sync_with_canonical(svn_url, dry_run=False)
    INFO VCS Version: 127
    INFO ZK Version: 126
    ERROR Refused to update zookeeper tree, couldn't obtain cluster lock

If we try again without the stolen lock, it'll acquire it just fine and do the
import.

    >>> zc.zkdeployment.sync.sync_with_canonical(svn_url, dry_run=False)
    INFO VCS Version: 127
    INFO ZK Version: 126
    INFO Version mismatch detected, resyncing
    INFO Importing foo.zk
    INFO Importing bar.zk

::

   /hosts
     version = 127
     /1.2.3.4
       version = 127
     /1.2.3.5
       version = 127

.. -> tree

    >>> zk.import_tree(tree, trim=True)

Layered trees
-------------

Sometimes, you need to layer information over nodes provides by other
files. For example, you might have a base tree that you augment for
staging or for off-site replication.

After importing files ending in .zk, it imports files enfing in .zkx.

    >>> foo_zkx = '/foo\n  /beep'
    >>> svn_files = ['foo.zkx', 'foo.zk', 'bar.zk', 'baz.txt']
    >>> svn_info = svn_info.replace('127', '128')
    >>> zc.zkdeployment.sync.sync_with_canonical(svn_url, dry_run=False)
    INFO VCS Version: 128
    INFO ZK Version: 127
    INFO Version mismatch detected, resyncing
    INFO Importing foo.zk
    INFO Importing bar.zk
    INFO Importing foo.zkx

    >>> zk.print_tree()
    /ZktoolsLocks
      string_value = 'zktools ZLock dir'
      /,hosts
        string_value = 'lock'
    /bar
      /bar
    /extra_thing_that_should_be_ignored
    /foo
      /bar
      /beep
    /hosts
      version = 128
      /1.2.3.4
        version = 127
      /1.2.3.5
        version = 127

.. cleanup:

    >>> svn_cmd_patcher.stop()

get_zk_version
==============

get_zk_version will return the current version of the cluster, as determined
by the zookeeper '/hosts' property.

    >>> zk.properties('/hosts').update(version=42)
    >>> zc.zkdeployment.sync.get_zk_version(zk)
    42

ALL STOP
========

If the hosts node has a version of None, the syncer will refuse to
run:

    >>> zk.properties('/hosts').update(version=None)
    >>> svn_info = svn_info.replace('128', '129')
    >>> zc.zkdeployment.sync.sync_with_canonical(svn_url, dry_run=False)
    CRITICAL ALL STOP, cluster version is None
